data player[2](address, commit, choice, has_revealed)
data num_players
data reward
data timer_start
data check_winner[3][3]


def init():
    self.num_players = 0

def check_winner(c0, c1):
    # determine the winner of the rps game
    # c0 is the choice of player 0
    # c1 is the choice of player 1

    # returning 0 indicates player 0 wins
    # returning 1 indicates player 1 wins
    # returning 2 indicates a tie

    # 0 ~ rock
    # 1 ~ paper
    # 2 ~ scissors

    # same choice means tie
    self.check_winner[0][0] = 2
    self.check_winner[1][1] = 2
    self.check_winner[2][2] = 2

    # rock beats scissors
    self.check_winner[0][2] = 0
    self.check_winner[2][0] = 1

    # scissors beats paper
    self.check_winner[2][1] = 0
    self.check_winner[1][2] = 1

    # paper beats rock
    self.check_winner[1][0] = 0
    self.check_winner[0][1] = 1

    return(self.check_winner[c0][c1])

   
def add_player(player_commitment):
    # accepts a hash from the player in form sha3(address, choice, nonce)

    if self.test_callstack() != 1:
        return(-1)

    if self.num_players < 2 and msg.value >= 1000:
        self.reward = self.reward + msg.value
        self.player[self.num_players].address = msg.sender
        self.player[self.num_players].commit = player_commitment
        self.num_players = self.num_players + 1

        if msg.value - 1000 > 0:
            send(0, msg.sender, msg.value-1000)
        return(0)
    else:    
        if msg.value > 0 :
            # prevent unnecessary leakage of money
            send(0, msg.sender, msg.value)
        return(-1)
        
def open(choice, nonce):
    # open the commitment
    if self.test_callstack() != 1:
        return(-2)

    if not num_players == 2:
        return(-3)

    if choice != 0 and choice != 1 and choice != 2:
        return(-1)

    # determine which player submitted the open request
    if msg.sender == self.player[0].address:
        player = 0
    elif msg.sender == self.player[1].address:
        player = 1
    else:
        log('sender error')
        return(-1)

    # check the commitment and ensure the player has not tried to commit already
    if sha3([msg.sender, choice, nonce], items=3) == self.player[player].commit and not self.player[player].has_revealed:
        #If commitment verified, we should store choice in plain text
        self.player[player].choice = choice

        # store current block number to give other player 10 blocks to open their commit
        self.player[player].has_revealed = 1        

        if not self.timer_start:
            self.timer_start = block.number
        return(0)
    else:
        return(msg.sender)

def check():
    if self.test_callstack() != 1: 
        return(-5)

    if block.number - self.timer_start < 10: 
        # this ensures that the players had time to commit
        return(-2)

    if self.player[0].has_revealed and self.player[1].has_revealed:
        p0_choice = self.player[0].choice
        p1_choice = self.player[1].choice
        winner = self.check_winner(p0_choice, p1_choice)

        if winner == 0:
            # player 0 wins
            send(0,self.player[0].address, self.reward)
            return(0)
        elif winner == 1:
            # player 1 wins
            send(0,self.player[0].address, self.reward)
            return(1)
        elif winner == 2:
            # tie
            send(0,self.player[0].address, self.reward/2)
            send(0,self.player[1].address, self.reward/2)
            return(2)
        else:
            log('error, unclear who won')
            return(-1)

    elif self.player[0].has_revealed and not self.player[1].has_revealed:
        # p0 revealed but p1 did not, so send money to p0
        send(0,self.player[0].address, self.reward)
        return(0)
    elif not self.player[0].has_revealed and self.player[1].has_revealed:
        # p2 revealed but p0 did not, so send money to p1
        send(0,self.player[1].address, self.reward)
        return(1)
    else:
        return(-7)

def balance_check():
    # returns the balance to ensure funds were lost and won properly
    log(self.storage["player1"].balance)
    log(self.storage["player2"].balance)

def test_callstack():
    # this called in order to prevent a max callstack exception
    return(1)

def return_sender():
    return(msg.sender)
